asmscan
Author: Eugene Ma

==========[ 0x0 Introduction ]

        asmscan is a port scanner that applies both TCP and SYN scanning
techniques to reveal open ports. It is written entirely in 32-bit x86 assembly,
and uses only Linux system calls to interface with the operating system's
network stack. Consequently, it is incompatible with other operating systems or
microprocessor architectures. However, compared with other port scanner
software, asmscan has the advantage of being completely libc free. In other
words, it is never linked with an external library such as glibc. Furthermore,
because asmscan is written in assembly, its binary is rather small at ten
thousand bytes or so.

==========[ 0x1 Installation ]

$ cat Makefile 
asmscan: asmscan.o
        ld -o asmscan asmscan.o
asmscan.o: asmscan.asm
        nasm -g -f elf -o asmscan.o asmscan.asm

==========[ 0x2 Usage ]

$ ./portscan
Usage: portscan <target ip>

==========[ 0x3 Operation ]

asmscan implements two modes of operation. 

1. In non-root user mode, asmscan will perform what is known as a TCP scan, and
attempts to establish TCP connections with ports 0-1023. If a given connection
is successful, the port is considered open and the port number is printed to
standard output. There are simple heuristics for inferring whether a port is
closed or filtered, but asmscan does not expose this information to the user at
this time.  

2. In root user mode, asmscan has the root-level permissions necessary to send
packets with custom crafted headers, and will perform what is known as a SYN
scan. It will first ping the target host with a custom ICMP echo packet and
wait for a response, using the round trip time to estimate the network latency. 

asmscan will then pretend to initiate TCP connections by sending SYN packets to
ports 0-1023 of the target host. For each port, asmscan waits for a response
after sending the SYN packet. This duration is calculated from the previous
ICMP ping.

If asmscan does not get a response in time, the packet it sent was probably
dropped by a firewall and it considers the port filtered. In the case it does
get a response, the received packet is examined for the SYN and ACK flags in
the TCP header. If these flags are on, it is implied that the target
port/service is willing to complete the connection, and so the port is
considered open. Like TCP mode, asmscan does not differentiate between closed
and filtered ports to the user.

In both modes, asmscan scans ports in parallel instead of serially. This gives
it speeds that are comparable to those of nmap.

==========[ 0x4 Todo ]
- Allow user to specify a range of ports
- Allow user to specify a range of IP's
- Greater granularity of port state: notify the user if a port is open, closed,
  filtered, or possibly something else.
